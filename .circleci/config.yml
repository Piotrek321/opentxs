version: 2.1

configuration:
  - ubuntu_version: &ubuntu_version ubuntu-2004:current

parameters:
  docker-image-android:
    default: "opentransactions/android:14"
    type: string
  docker-image-ci:
    default: "polishcode/matterfi-ci-fedora:35-3"
    type: string
  ctest-config:
    default: "-j 8 --output-on-failure --repeat until-pass:3 --timeout 300 --schedule-random"
    type: string
  ctest-disabled-tests:
    default: "(ottest-blockchain-regtest-)(basic|reorg|sync-client|restart|restart-end|restart-inloop|simple-transfer|round-robin-distribution-transactions|round-robin-recapture-transactions|sync-server)"
    type: string
  ctest-disabled-tests-ccov:
    default: "(ottest-blockchain-)(headeroracle-|regtest-)(add_checkpoint_already_in_best_chain|add_checkpoint_disconnected|basic_reorg|basic_reorg-batch|basic_sequence|basic_sequence-batch|checkpoint_prevents_reorg|checkpoint_prevents_reorg-batch|checkpoint_prevents_update|checkpoint_prevents_update-batch|delete_checkpoint|receive_headers_out_of_order|receive_headers_out_of_order-batch|basic|sync-client|restart|restart-end|restart-inloop|restart-early|simple-transfer|round-robin-distribution-transactions|round-robin-recapture-transactions|reorg)"
    type: string

executors:
  executor_ubuntu_large:
    machine:
      image: *ubuntu_version
    resource_class: xlarge
      
commands:
  cmd_prepare_env_build:
    description: "command to prepare all build dependencies: code, submodules, tools"
    parameters:
      docker-image:
        type: string
      temp-path:
        type: string
    steps:
      #pulling docker image is somehow much slower than using docker image as executor
      #pulling        : 2m 44s
      #docker executor: 1m 40s
      - run:
          name: "pull docker image"
          command: docker pull <<parameters.docker-image>>
      - checkout
      - run:
          name: "checkout submodules (circleci doesn't do that by default)"
          working_directory: "~/project"
          command: |
            git submodule sync --recursive
            git submodule update --recursive --init
      - run:
          name: "prepare temp dirs"
          working_directory: "~/"
          command: |
            mkdir -p <<parameters.temp-path>>
  cmd_prepare_env_test:
    description: "command to prepare light env for running tests"
    parameters:
      docker-image:
        type: string
    steps:
      - run:
          name: "pull docker image"
          command: docker pull <<parameters.docker-image>>
  cmd_build_android:
    description: "command to build opentxs for android in docker"
    parameters:
      docker-image:
        type: string
      arch:
        type: string
    steps:
      - run:
          name: "pull docker image"
          command: |
            docker run \
              --mount type=bind,src=/home/circleci/project,dst=/home/src,readonly \
              --mount type=bind,src=/home/circleci/opentxs-for-android/<<parameters.arch>>,dst=/home/output \
              -i <<parameters.docker-image>> <<parameters.arch>> all
  cmd_build_linux:
    description: "command to build opentxs for linux in docker"
    parameters:
      docker-image:
        type: string
      compiler:
        type: string
      flavor:
        type: string
      mode:
        type: string
    steps:
      - run:
          name: "build"
          command: |
            docker run \
              --mount type=bind,src=/home/circleci/project,dst=/home/src,readonly \
              --mount type=bind,src=/tmp/opentxs,dst=/home/output \
              -i --entrypoint /usr/bin/build-opentxs-<<parameters.compiler>>.sh \
              <<parameters.docker-image>> <<parameters.flavor>> <<parameters.mode>>
  cmd_test_linux:
    description: "command to test opentxs for linux in docker"
    parameters:
      docker-image:
        type: string
      ctest-params:
        type: string
    steps:
      - run:
          name: "test"
          command: |
            docker run \
              --mount type=bind,src=/home/circleci/project,dst=/home/src,readonly \
              --mount type=bind,src=/tmp/opentxs,dst=/home/output \
              -i --entrypoint /usr/bin/test-opentxs.sh \
              <<parameters.docker-image>> "<<parameters.ctest-params>>"
  cmd_calc_ccov_linux:
    description: "command to calculate ccov report"
    parameters:
      docker-image:
        type: string
    steps:
      - run:
          name: "create temp dirs"
          command: |
            mkdir -p /tmp/coverage
            mkdir -p /tmp/coverage-artifact
      - run:
          name: "calculate ccov"
          command: |
            docker run \
              --mount type=bind,src=/home/circleci/project,dst=/home/src,readonly \
              --mount type=bind,src=/tmp/opentxs,dst=/home/output \
              --mount type=bind,src=/tmp/coverage,dst=/home/coverage \
              -i --entrypoint /usr/bin/ccov-opentxs-gcc.sh \
              <<parameters.docker-image>>
      - run:
          name: "pack ccov report"
          command: |
            cd /tmp
            tar -czf /tmp/coverage-artifact/ccov-report-$(date +%Y%m%d-%H%M%S)-cci-${CIRCLE_WORKFLOW_JOB_ID}.tar.gz coverage/
      - store_artifacts:
          name: "store artifacts to circleci"
          path: /tmp/coverage-artifact/
          destination: ccov-report
            
jobs:
  build-android:
    parameters:
      docker-image:
        type: string
      arch:
        type: string
    executor: executor_ubuntu_large
    steps:
      - cmd_prepare_env_build:
          docker-image: <<parameters.docker-image>>
          temp-path: opentxs-for-android/<<parameters.arch>>
      - cmd_build_android:
          docker-image: <<parameters.docker-image>>
          arch: <<parameters.arch>>
  build-linux:
    parameters:
      docker-image:
        type: string
      compiler:
        type: string
      flavor:
        type: string
      mode:
        type: string
    executor: executor_ubuntu_large
    steps:
      - cmd_prepare_env_build:
          docker-image: <<parameters.docker-image>>
          temp-path: "/tmp/opentxs"
      - cmd_build_linux:
          docker-image: <<parameters.docker-image>>
          compiler: <<parameters.compiler>>
          flavor: <<parameters.flavor>>
          mode: <<parameters.mode>>
      - run:
          name: "persist task identifier (CI debugging)"
          command: |
            mkdir -p /tmp/opentxs
            printf "%s:%s" <<parameters.compiler>> <<parameters.flavor>> > /tmp/opentxs/job-id
            cat /tmp/opentxs/job-id
      - persist_to_workspace:
          root: /
          paths:
            - tmp/opentxs
  test-linux:
    parameters:
      docker-image:
        type: string
      ctest-params:
        type: string
      compiler:
        type: string
      flavor:
        type: string
    executor: executor_ubuntu_large
    steps:
      - cmd_prepare_env_test:
          docker-image: <<parameters.docker-image>>
      - attach_workspace:
          at: /
      - run:
          name: "read task identifier (CI debugging)"
          command: |
            cat /tmp/opentxs/job-id
      - cmd_test_linux:
          docker-image: <<parameters.docker-image>>
          ctest-params: <<parameters.ctest-params>>
  #ccov workflow needs to be run in a single job in order to avoid packing/unpacking
  #built binaries - ccov instrumentation bloats them 2-3 times
  ccov-linux:
    parameters:
      docker-image:
        type: string
      ctest-params:
        type: string
    executor: executor_ubuntu_large
    steps:
      - cmd_prepare_env_build:
          docker-image: <<parameters.docker-image>>
          temp-path: "/tmp/opentxs"
      - cmd_build_linux:
          docker-image: <<parameters.docker-image>>
          compiler: gcc
          flavor: full
          mode: ccov
      - cmd_test_linux:
          docker-image: <<parameters.docker-image>>
          ctest-params: <<parameters.ctest-params>>
      - cmd_calc_ccov_linux:
          docker-image: <<parameters.docker-image>>
  sanitizer-linux:
    parameters:
      docker-image:
        type: string
    executor: executor_ubuntu_large
    steps:
      - cmd_prepare_env_build:
          docker-image: <<parameters.docker-image>>
          temp-path: "/tmp/opentxs"
      - cmd_build_linux:
          docker-image: <<parameters.docker-image>>
          compiler: clang
          flavor: full
          mode: sanitizer
workflows:
  opentxs-android:
    when: true
    jobs:
      - build-android:
          docker-image: <<pipeline.parameters.docker-image-android>>
          matrix:
            parameters:
              #arch: [arm64, arm, x64, x86]
              arch: [arm64]
  opentxs-linux:
    when: true
    jobs:
      - build-linux:
          name: build-linux-<<matrix.compiler>>-<<matrix.flavor>>
          docker-image: <<pipeline.parameters.docker-image-ci>>
          mode: standard
          matrix:
            parameters:
              #compiler: [gcc, clang]
              #flavor: [test01, test02, test03, test04, test05, test06, test07, test08, nopch, full]
              compiler: [clang]
              flavor: [full]
      - test-linux:
          name: test-linux-<<matrix.compiler>>-<<matrix.flavor>>
          docker-image: <<pipeline.parameters.docker-image-ci>>
          ctest-params: <<pipeline.parameters.ctest-config>> -E <<pipeline.parameters.ctest-disabled-tests>>
          matrix:
            parameters:
              #compiler: [gcc, clang]
              #flavor: [nopch, full]
              compiler: [clang]
              flavor: [full]
          requires:
            - build-linux-<<matrix.compiler>>-<<matrix.flavor>>
  opentxs-ccov:
    when: false
    jobs:
      - ccov-linux:
          name: code-coverage-gcc-full-test
          docker-image: <<pipeline.parameters.docker-image-ci>>
          ctest-params: <<pipeline.parameters.ctest-config>> -E <<pipeline.parameters.ctest-disabled-tests-ccov>>
  #just a reference build, no actual sanitization/tests
  opentxs-sanitizer:
    when: false
    jobs:
      - sanitizer-linux:
          name: memory-sanitizer-clang-full
          docker-image: <<pipeline.parameters.docker-image-ci>>
